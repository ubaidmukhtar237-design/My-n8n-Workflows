{
  "active": false,
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-19T11:18:22.021Z",
  "id": "0wEO94EbDLFqh9Bt",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Reschedule",
  "nodes": [
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -1664,
        16
      ],
      "id": "0980d0f2-02fc-4a22-85f4-c806a63289e2",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.cal.com/v2/bookings/{{ $json.booking_id }}/reschedule",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cal-api-version",
              "value": "2024-08-13"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "start",
              "value": "={{ $json.isoDateTime }}"
            },
            {
              "name": "reschedulingReason",
              "value": "={{ $json.reason }}"
            },
            {
              "name": "rescheduledBy",
              "value": "={{ $json.email }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -944,
        16
      ],
      "id": "e3f622df-6019-4997-b5c6-7958371f6d13",
      "name": "HTTP Request",
      "credentials": {
        "httpHeaderAuth": {
          "id": "1KUi1Z17BqtoNnPl",
          "name": "Cal.com"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// This is a ROBUST \"Brute Force\" Data Extractor.\n// It is designed to work even when the AI sends horribly formatted, double-wrapped strings.\n// It DOES NOT use JSON.parse() because the input is not valid JSON.\n// It uses Regular Expressions to find and extract the values we need.\n\nconst item = items[0];\n\ntry {\n  // 1. Get the raw, broken string from the 'query' property.\n  const rawString = item.json.query;\n  if (!rawString) throw new Error(\"Input 'query' is missing.\");\n\n  // 2. Helper Function to Extract a Value\n  // This function builds a specific \"search pattern\" to find the text between quotes for a given key.\n  function extractValue(key, str) {\n    // This regex looks for a pattern like: \\\"key\\\":\\\"value\\\"\n    // It is designed to match the AI's broken output, including all the extra escape characters.\n    const regex = new RegExp(`\\\\\\\\\\\\\"${key}\\\\\\\\\\\\\\\":\\\\\\\\\\\\\"(.*?)\\\\\\\\\\\\\"`);\n    const match = str.match(regex);\n    // If a match is found, return the captured value. Otherwise, return null.\n    return match ? match[1] : null;\n  }\n\n  // 3. Use the helper function to extract each piece of data from the broken string.\n  item.json.booking_id = extractValue(\"booking_id\", rawString);\n  \n  // --- THE FIX IS HERE ---\n  // We will check for both 'new_isoDateTime' AND 'isoDateTime' to be safe.\n  item.json.new_isoDateTime = extractValue(\"new_isoDateTime\", rawString) || extractValue(\"isoDateTime\", rawString);\n  // --- END OF FIX ---\n  \n  item.json.email = extractValue(\"email\", rawString);\n  item.json.reason = extractValue(\"reason\", rawString);\n\n} catch (error) {\n  item.json.error = `Failed to extract data from query string: ${error.message}`;\n}\n\n// Return the item with all the new, clean fields.\nreturn [item];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1456,
        16
      ],
      "id": "a25f0d17-4365-45f9-8e39-ec153be82ff5",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0cf31534-5b11-4885-880f-fb4cc33474de",
              "name": "booking_id",
              "value": "={{ $json.booking_id }}",
              "type": "string"
            },
            {
              "id": "a27d22ed-dbc9-4db7-8f72-14592316480b",
              "name": "isoDateTime",
              "value": "={{ $json.new_isoDateTime }}",
              "type": "string"
            },
            {
              "id": "d0ede30a-927c-4d1b-a4ec-fff5a3649f34",
              "name": "email",
              "value": "={{ $json.email }}",
              "type": "string"
            },
            {
              "id": "811ea2fd-f70a-48fc-9564-1c4c8adad958",
              "name": "reason",
              "value": "={{ $json.reason }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1232,
        16
      ],
      "id": "c5dfc20c-cd18-4e1d-918a-cc0814ba6ce0",
      "name": "Edit Fields"
    }
  ],
  "pinData": {
    "When Executed by Another Workflow": [
      {
        "json": {
          "query": "{\"booking_id\":\"appt_12345abc\",\"isoDateTime\":\"2025-10-15T10:00:00.000Z\",\"email\":\"john.doe.client@example.com\",\"reason\":\"Client had a personal emergency and needs to move the appointment.\"}"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-19T11:18:22.023Z",
      "updatedAt": "2025-09-19T11:18:22.023Z",
      "role": "workflow:owner",
      "workflowId": "0wEO94EbDLFqh9Bt",
      "projectId": "HHLWOKEAArOwm3kN"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-09-20T12:21:09.000Z",
  "versionId": "4d70cee3-314a-4fc6-9b3a-79203f8bb0a6"
}