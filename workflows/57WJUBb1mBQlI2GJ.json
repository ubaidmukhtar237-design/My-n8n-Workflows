{
  "active": false,
  "connections": {
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append row in sheet": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call 'My Own Practice'": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Call 'My Own Practice'",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript1": {
      "main": [
        []
      ]
    },
    "Get row(s) in sheet in Google Sheets": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-29T09:40:34.317Z",
  "id": "57WJUBb1mBQlI2GJ",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "My Own Practice",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "=Task: Find 100 dental clinic website URLs in the United States.\n\nInstructions:\n1. Use Google Maps or publicly available online sources to identify dental clinics located in the USA.\n2. Only include clinics that have a website listed. Skip clinics without websites.\n3. Do not include clinics outside the USA.\n4. Provide exact website URLs only, no extra information like addresses, phone numbers, or emails.\n5. Return the output as a plain list, one URL per line, in JSON format if possible.\n6. Make sure the URLs are live and correctly formatted (include https:// if applicable).\n7. Limit the output to exactly 100 unique websites.\n8. Exclude any websites already found in the Google Sheets tool.\n",
        "options": {
          "systemMessage": "=You are an expert AI agent that finds website URLs of dental clinics located only in the USA using Google Maps or other public online sources.  \n\nSTRICT RULES:\n- Only return valid URLs of dental clinics’ official websites.  \n- Do not include addresses, phone numbers, emails, or non-dental businesses.  \n- Always output strictly in JSON format with this structure:  \n\n{\n  \"websites\": [\n    \"https://www.exampleclinic1.com\",\n    \"https://www.exampleclinic2.com\",\n    ...\n  ]\n}\n\n- Always use the tool `Get row(s) in sheet in Google Sheets` to check for existing URLs.  \n  - Never return or search for any URLs already listed in the sheet.  \n  - Only provide new, unique website URLs not found in the sheet.  \n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -320,
        -48
      ],
      "id": "291be94c-953e-49cb-80b0-1870f37e26af",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -464,
        160
      ],
      "id": "5a82e877-54ae-4057-bb41-27749d754174",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "sPfpmF39mpaLYCjc",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6166317f-7ce3-4b39-aa22-6ca96fb2cad5",
              "name": "=query",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        32,
        -48
      ],
      "id": "4dd7b6ee-57f8-492a-a958-64f1fd854838",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "// The input data is a string in items[0].json.query\nconst rawInputString = items[0].json.query;\n\n// The actual JSON data is embedded inside this string. We need to extract it.\n// Let's find the first '{' and the last '}' to get the JSON part.\nconst startIndex = rawInputString.indexOf('{');\nconst endIndex = rawInputString.lastIndexOf('}');\n\n// Check if we found a valid JSON object block\nif (startIndex === -1 || endIndex === -1) {\n  throw new Error(\"Could not find a JSON object in the input string.\");\n}\n\n// Extract the clean JSON string from between the braces\nconst jsonString = rawInputString.substring(startIndex, endIndex + 1);\n\ntry {\n  // Now, parse the clean JSON string\n  const data = JSON.parse(jsonString);\n\n  // The URLs are in an array under the 'websites' key\n  const websites = data.websites;\n\n  // Return a new item for each website. This is the standard\n  // way to process lists, allowing subsequent nodes to run\n  // for each individual URL.\n  return websites.map(url => {\n    return {\n      json: {\n        url: url\n      }\n    };\n  });\n\n} catch (error) {\n  // If parsing still fails, throw a more informative error\n  throw new Error(`Failed to parse JSON. Error: ${error.message}.`);\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        -48
      ],
      "id": "abd82ce6-c805-4d85-9602-7eb0a22c60eb",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1SqQo5bPrZtgzPhzUPJHw9ikI4lKY0CPPQRBEjSQZBo8",
          "mode": "list",
          "cachedResultName": "Url Storage",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1SqQo5bPrZtgzPhzUPJHw9ikI4lKY0CPPQRBEjSQZBo8/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1SqQo5bPrZtgzPhzUPJHw9ikI4lKY0CPPQRBEjSQZBo8/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Url": "={{ $json.url }}"
          },
          "matchingColumns": [
            "Url"
          ],
          "schema": [
            {
              "id": "Url",
              "displayName": "Url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Email ",
              "displayName": "Email ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "PhoneNumber",
              "displayName": "PhoneNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        448,
        -48
      ],
      "id": "85205904-d77e-46bd-9c3d-54c71a328253",
      "name": "Append row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "JOHwDixlr7umKmYo",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -624,
        -48
      ],
      "id": "74d8a0f4-c73f-42bf-804c-83f95a847573",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "content": "To get website url of dental clinic in usa from google maps",
        "height": 608,
        "width": 2208,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -928,
        -224
      ],
      "typeVersion": 1,
      "id": "e16c2f25-d562-48e5-b3c3-c10fae901cc1",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "To find Email and phone number of stored urls",
        "height": 608,
        "width": 2208,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -928,
        400
      ],
      "typeVersion": 1,
      "id": "86b96284-3016-43cd-934e-f31bbcff3243",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "57WJUBb1mBQlI2GJ",
          "mode": "list",
          "cachedResultName": "My Own Practice"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {}
        },
        "mode": "each",
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        864,
        16
      ],
      "id": "48cf0415-84e8-4148-9657-a57b5ab07632",
      "name": "Call 'My Own Practice'"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        656,
        -48
      ],
      "id": "6d393e5f-2758-49e6-a070-3acbe70dbb88",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "amount": 0.5
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1088,
        16
      ],
      "id": "21d32a83-fe2c-4e23-a15d-d054c9a251b3",
      "name": "Wait",
      "webhookId": "72583972-f7ba-4e97-9d8d-470dacbccdb3"
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -752,
        592
      ],
      "id": "59b80e66-3b91-4e16-8554-dd230ca4d89b",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Only extract the **email address** and **phone number** from the website provided as input. \nDo not include any other information. \nOutput the results strictly in JSON format, using this structure:\n\n{\n  \"email\": \"example@example.com\",\n  \"phone\": \"+1-123-456-7890\"\n}\n\nUse the following input URL to extract the data:\n{{ $json.Url }}",
        "options": {
          "systemMessage": "=You are an expert at extracting contact information from dental clinic websites in the USA. "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -544,
        592
      ],
      "id": "a3f5259e-b945-41e7-868c-d8a93a78fe0a",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -592,
        768
      ],
      "id": "932bff32-b55f-4aae-8a02-bc6fba393394",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "sPfpmF39mpaLYCjc",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b9177f48-6233-42ea-9343-730530759d95",
              "name": "query",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -192,
        592
      ],
      "id": "4a3bfc52-ffd8-4cd3-bd25-4a66d0a9ca31",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "jsCode": "// The input data is a messy string located in items[0].json.query.\nconst rawInputString = items[0].json.query;\n\n// Find the start '{' and end '}' of the JSON object within the string.\nconst startIndex = rawInputString.indexOf('{');\nconst endIndex = rawInputString.lastIndexOf('}');\n\n// Check if we found a valid JSON block. If not, throw an error.\nif (startIndex === -1 || endIndex === -1) {\n  throw new Error(\"Could not find a valid JSON object in the input string.\");\n}\n\n// Extract the clean JSON string from between the braces.\nconst jsonString = rawInputString.substring(startIndex, endIndex + 1);\n\ntry {\n  // Parse the clean string into a JavaScript object.\n  const data = JSON.parse(jsonString);\n\n  // Create a new output item with the extracted email and phone fields.\n  const outputData = {\n    json: {\n      email: data.email,\n      phone: data.phone,\n      url: data.url,\n      urlId: data.urlId\n    }\n  };\n\n  // Return the new item. It must be inside an array.\n  return [outputData];\n\n} catch (error) {\n  // If parsing still fails for some reason, provide a helpful error message.\n  console.error(\"The extracted string that failed to parse was: \", jsonString);\n  throw new Error(`Failed to parse the extracted JSON. Error: ${error.message}`);\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -16,
        592
      ],
      "id": "eb134b5c-9466-45a8-afab-dfae20879bda",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1SqQo5bPrZtgzPhzUPJHw9ikI4lKY0CPPQRBEjSQZBo8",
          "mode": "list",
          "cachedResultName": "Url Storage:Dental Clinics",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1SqQo5bPrZtgzPhzUPJHw9ikI4lKY0CPPQRBEjSQZBo8/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1SqQo5bPrZtgzPhzUPJHw9ikI4lKY0CPPQRBEjSQZBo8/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Email ": "={{ $json.email ? $json.email : 'notProvided' }}",
            "PhoneNumber": "={{ $json.phone ? $json.phone : 'notProvided' }}",
            "Url": "={{ $('When Executed by Another Workflow').item.json.Url }}"
          },
          "matchingColumns": [
            "Url"
          ],
          "schema": [
            {
              "id": "Url",
              "displayName": "Url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Email ",
              "displayName": "Email ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "PhoneNumber",
              "displayName": "PhoneNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        192,
        592
      ],
      "id": "23505273-02ca-400d-9d0b-f0ad5fc5637a",
      "name": "Update row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "JOHwDixlr7umKmYo",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1SqQo5bPrZtgzPhzUPJHw9ikI4lKY0CPPQRBEjSQZBo8",
          "mode": "list",
          "cachedResultName": "Url Storage:Dental Clinics",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1SqQo5bPrZtgzPhzUPJHw9ikI4lKY0CPPQRBEjSQZBo8/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1SqQo5bPrZtgzPhzUPJHw9ikI4lKY0CPPQRBEjSQZBo8/edit#gid=0"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "Url",
              "lookupValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('values0_Value', ``, 'string') }}"
            }
          ]
        },
        "options": {
          "dataLocationOnSheet": {
            "values": {
              "rangeDefinition": "specifyRangeA1",
              "range": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Range', ``, 'string') }}"
            }
          }
        }
      },
      "type": "n8n-nodes-base.googleSheetsTool",
      "typeVersion": 4.7,
      "position": [
        -176,
        128
      ],
      "id": "ab077ad5-5966-4414-bb84-7aaf1aa2e262",
      "name": "Get row(s) in sheet in Google Sheets",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "JOHwDixlr7umKmYo",
          "name": "Google Sheets account"
        }
      }
    }
  ],
  "pinData": {
    "When Executed by Another Workflow": [
      {
        "json": {
          "Url": "https://www.nycsmiledesign.com"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-29T09:40:34.320Z",
      "updatedAt": "2025-09-29T09:40:34.320Z",
      "role": "workflow:owner",
      "workflowId": "57WJUBb1mBQlI2GJ",
      "projectId": "HHLWOKEAArOwm3kN"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-09-29T19:59:20.000Z",
  "versionId": "50734884-e894-4b4d-8ac9-e6a54ab9b52d"
}