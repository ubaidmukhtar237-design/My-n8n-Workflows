{
  "active": false,
  "connections": {
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-29T09:40:34.317Z",
  "id": "57WJUBb1mBQlI2GJ",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "My Own Practice",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "=Task: Find 100 dental clinic website URLs in the United States.\n\nInstructions:\n1. Use Google Maps or publicly available online sources to identify dental clinics located in the USA.\n2. Only include clinics that have a website listed. Skip clinics without websites.\n3. Do not include clinics outside the USA.\n4. Provide **exact website URLs** only, no extra information like addresses, phone numbers, or emails.\n5. Return the output as a **plain list**, one URL per line, in JSON format if possible:\n\nExample:\n{\n  \"websites\": [\n    \"https://www.exampledental1.com\",\n    \"https://www.exampledental2.com\",\n    ...\n  ]\n}\n\n6. Make sure the URLs are live and correctly formatted (include https:// if applicable).\n7. Limit the output to exactly 100 unique websites.\n\nEnd of instructions.\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -320,
        -48
      ],
      "id": "291be94c-953e-49cb-80b0-1870f37e26af",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -464,
        160
      ],
      "id": "5a82e877-54ae-4057-bb41-27749d754174",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "sPfpmF39mpaLYCjc",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6166317f-7ce3-4b39-aa22-6ca96fb2cad5",
              "name": "=query",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        32,
        -48
      ],
      "id": "4dd7b6ee-57f8-492a-a958-64f1fd854838",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "// The input data is a string in items[0].json.query\nconst rawInputString = items[0].json.query;\n\n// The actual JSON data is embedded inside this string. We need to extract it.\n// Let's find the first '{' and the last '}' to get the JSON part.\nconst startIndex = rawInputString.indexOf('{');\nconst endIndex = rawInputString.lastIndexOf('}');\n\n// Check if we found a valid JSON object block\nif (startIndex === -1 || endIndex === -1) {\n  throw new Error(\"Could not find a JSON object in the input string.\");\n}\n\n// Extract the clean JSON string from between the braces\nconst jsonString = rawInputString.substring(startIndex, endIndex + 1);\n\ntry {\n  // Now, parse the clean JSON string\n  const data = JSON.parse(jsonString);\n\n  // The URLs are in an array under the 'websites' key\n  const websites = data.websites;\n\n  // Return a new item for each website. This is the standard\n  // way to process lists, allowing subsequent nodes to run\n  // for each individual URL.\n  return websites.map(url => {\n    return {\n      json: {\n        url: url\n      }\n    };\n  });\n\n} catch (error) {\n  // If parsing still fails, throw a more informative error\n  throw new Error(`Failed to parse JSON. Error: ${error.message}.`);\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        -48
      ],
      "id": "abd82ce6-c805-4d85-9602-7eb0a22c60eb",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1SqQo5bPrZtgzPhzUPJHw9ikI4lKY0CPPQRBEjSQZBo8",
          "mode": "list",
          "cachedResultName": "Url Storage",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1SqQo5bPrZtgzPhzUPJHw9ikI4lKY0CPPQRBEjSQZBo8/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1SqQo5bPrZtgzPhzUPJHw9ikI4lKY0CPPQRBEjSQZBo8/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Url": "={{ $json.url }}"
          },
          "matchingColumns": [
            "Url"
          ],
          "schema": [
            {
              "id": "Url",
              "displayName": "Url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        448,
        -48
      ],
      "id": "85205904-d77e-46bd-9c3d-54c71a328253",
      "name": "Append row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "JOHwDixlr7umKmYo",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -624,
        -48
      ],
      "id": "74d8a0f4-c73f-42bf-804c-83f95a847573",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "content": "To get website url of dental clinic in usa from google maps",
        "height": 608,
        "width": 1904,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -928,
        -224
      ],
      "typeVersion": 1,
      "id": "e16c2f25-d562-48e5-b3c3-c10fae901cc1",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "To find Email and phone number of stored urls",
        "height": 608,
        "width": 1904,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -928,
        416
      ],
      "typeVersion": 1,
      "id": "86b96284-3016-43cd-934e-f31bbcff3243",
      "name": "Sticky Note1"
    }
  ],
  "pinData": {
    "AI Agent": [
      {
        "json": {
          "output": "```json\n{\n  \"websites\": [\n    \"https://www.209nycdental.com\",\n    \"https://www.hellotend.com\",\n    \"https://www.tribecadentalstudio.com\",\n    \"https://www.millerspinaldds.com\",\n    \"https://www.cpwdentistry.com\",\n    \"https://www.nygeneraldentistry.com\",\n    \"https://www.sohosmile.com\",\n    \"https://www.lemchensalzer.com\",\n    \"https://www.nycsmiledesign.com\",\n    \"https://www.glassmandentalcare.com\",\n    \"https://www.centurycitysmiles.com\",\n    \"https://www.thedentalcarecenter.com\",\n    \"https://www.billdorfmandds.com\",\n    \"https://www.smilela.com\",\n    \"https://www.ladentalclinic.com\",\n    \"https://www.geachdental.com\",\n    \"https://www.westsidedentalassociates.com\",\n    \"https://www.downtowndentalla.com\",\n    \"https://www.rifkinraanan.com\",\n    \"https://www.beverlyhillsdentalarts.com\",\n    \"https://www.watertowerdentalcare.com\",\n    \"https://www.thechicagodentalstudio.com\",\n    \"https://www.bigsmiledental.com\",\n    \"https://www.lincolnparksmiles.com\",\n    \"https://www.millenniumparkdental.com\",\n    \"https://www.artofmoderndentistry.com\",\n    \"https://www.dentalsmilesofwestloop.com\",\n    \"https://www.wickerparkdentalgroup.com\",\n    \"https://www.uadchicago.com\",\n    \"https://www.thedentalstandard.com\",\n    \"https://www.antoinedental.com\",\n    \"https://www.thehoustondentists.com\",\n    \"https://www.urbndental.com\",\n    \"https://www.montrosedental.com\",\n    \"https://www.greenwaydental.com\",\n    \"https://www.mysignaturesmiles.com\",\n    \"https://www.lovettdental.com\",\n    \"https://www.houstonuptowndentists.com\",\n    \"https://www.baytowngentledental.com\",\n    \"https://www.cosmeticdentaltexas.com\",\n    \"https://www.biltmoredentalcenter.com\",\n    \"https://www.centralvalleydentistry.com\",\n    \"https://www.desertdentistry.com\",\n    \"https://www.artisticd.com\",\n    \"https://www.dentaloncentral.com\",\n    \"https://www.paradisevalleydental.com\",\n    \"https://www.drrickdentistry.com\",\n    \"https://www.onpointedentistry.com\",\n    \"https://www.smiletoday.net\",\n    \"https://www.harrisdental.com\",\n    \"https://www.brickelldentalcare.com\",\n    \"https://www.miamidesignersmiles.com\",\n    \"https://www.gedentistry.com\",\n    \"https://drpattydental.com\",\n    \"https://www.smilestudiomiami.com\",\n    \"https://www.oconnordentalcare.com\",\n    \"https://www.biscaynedental.com\",\n    \"https://www.southgablesdental.com\",\n    \"https://www.pinecrestdental.com\",\n    \"https://www.fantasticdental.com\",\n    \"https://www.seattledentalassociates.com\",\n    \"https://www.belltowndentistry.com\",\n    \"https://www.aestheticdentalcenter.com\",\n    \"https://www.downtownseattledentists.com\",\n    \"https://www.fidleronthetooth.com\",\n    \"https://www.bryantdental.com\",\n    \"https://www.seattlesbestsmiles.com\",\n    \"https://www.rooseveltdental.com\",\n    \"https://www.greenlakedental.com\",\n    \"https://www.sound-dental.com\",\n    \"https://www.lartdental.com\",\n    \"https://www.icondentaldenver.com\",\n    \"https://espiredental.com\",\n    \"https://www.downtowndenverdental.com\",\n    \"https://www.cherrycreekdental.com\",\n    \"https://www.washparkdental.com\",\n    \"https://www.citycenterdentalgroup.com\",\n    \"https://www.codydental.com\",\n    \"https://www.highlandsmiles.com\",\n    \"https://www.moderndentistryofdenver.com\",\n    \"https://www.thedentalloftboston.com\",\n    \"https://www.dentalartsofboston.com\",\n    \"https://www.newburydental.com\",\n    \"https://www.copleydental.com\",\n    \"https://www.bostondental.com\",\n    \"https://www.backbaydentalcare.com\",\n    \"https://www.smileboston.com\",\n    \"https://www.charlesriverdental.com\",\n    \"https://www.longwood-dental.com\",\n    \"https://www.beaconhilldental.net\",\n    \"https://www.austindental.com\",\n    \"https://www.westlakehillsdentalarts.com\",\n    \"https://www.mydentistinaustin.com\",\n    \"https://www.swishsmiles.com\",\n    \"https://www.enameldentistry.com\",\n    \"https://www.thetoothbar.com\",\n    \"https://www.trudentistryaustin.com\",\n    \"https://www.forestfamilydentistry.com\"\n  ]\n}\n```"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-29T09:40:34.320Z",
      "updatedAt": "2025-09-29T09:40:34.320Z",
      "role": "workflow:owner",
      "workflowId": "57WJUBb1mBQlI2GJ",
      "projectId": "HHLWOKEAArOwm3kN"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-09-29T17:59:44.000Z",
  "versionId": "f3242433-c85a-40e3-ac9b-6a01602c7996"
}